name: CI

on: push

jobs:
  ci:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true
      matrix:
        name: [
          ubuntu-18-04-clang-8-debug,
          ubuntu-18-04-clang-8-debug-tsan,
          ubuntu-18-04-clang-8-debug-asan,
          ubuntu-18-04-clang-8-debug-ubsan,
          ubuntu-18-04-emcc-latest-debug,
          windows-2019-clang-cl-debug,
          #windows-2019-clang-debug,
          macos-10-14-clang-8-debug,
          ubuntu-18-04-clang-8-release,
          windows-2019-clang-cl-release,
          #windows-2019-clang-release,
          macos-10-14-clang-8-release,
        ]

        include:
          - name: ubuntu-18-04-emcc-latest-debug
            os: ubuntu-18.04
            cmake_build_type: Debug

          - name: ubuntu-18-04-clang-8-debug
            os: ubuntu-18.04
            cmake_build_type: Debug
            compiler: clang
            version: "8"

          - name: ubuntu-18-04-clang-8-debug-tsan
            os: ubuntu-18.04
            cmake_build_type: Debug
            compiler: clang
            version: "8"

          - name: ubuntu-18-04-clang-8-debug-ubsan
            os: ubuntu-18.04
            cmake_build_type: Debug
            compiler: clang
            version: "8"

          - name: ubuntu-18-04-clang-8-debug-asan
            os: ubuntu-18.04
            cmake_build_type: Debug
            compiler: clang
            version: "8"

          - name: windows-2019-clang-cl-debug
            cmake_build_type: Debug
            os: windows-2019
            compiler: clang-cl

          #- name: windows-2019-clang-debug
          #  cmake_build_type: Debug
          #  os: windows-2019
          #  compiler: clang

          - name: macos-10-14-clang-8-debug
            cmake_build_type: Debug
            os: macOS-10.14
            compiler: clang
            version: "8"

          - name: ubuntu-18-04-clang-8-release
            os: ubuntu-18.04
            cmake_build_type: Release
            compiler: clang
            version: "8"

          - name: windows-2019-clang-cl-release
            cmake_build_type: Release
            os: windows-2019
            compiler: clang-cl

          #- name: windows-2019-clang-release
          #  cmake_build_type: Release
          #  os: windows-2019
          #  compiler: clang

          - name: macos-10-14-clang-8-release
            cmake_build_type: Release
            os: macOS-10.14
            compiler: clang
            version: "8"


    steps:
      - uses: actions/checkout@v1

      - name: Install (Linux)
        if: runner.os == 'Linux'
        run: |
          curl -sSL https://github.com/Kitware/CMake/releases/download/v3.15.3/cmake-3.15.3-Linux-x86_64.tar.gz -o cmake.tar.gz
          sudo tar xf cmake.tar.gz --strip 1 -C /usr/local
          sudo apt-get install ninja-build
          if [[ "${{matrix.name}}" == "ubuntu-18-04-emcc-latest-debug" ]]; then
            git clone https://github.com/emscripten-core/emsdk.git
            cd emsdk
            git pull
            ./emsdk install latest-upstream
            ./emsdk activate latest-upstream
            source ./emsdk_env.sh
            cd ..
            git clone https://github.com/emscripten-core/emscripten.git
            echo "::set-env name=CC::$PWD/emsdk/upstream/emscripten/emcc"
            echo "::set-env name=CXX::$PWD/emsdk/upstream/emscripten/em++"
            echo "::set-env name=NODE_EXE::$PWD/emsdk/node/12.9.1_64bit/bin/node"
            emcc -v
            em++ -v
          else
            # LLVM 9 is not yet in bionic's repositories.
            sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main"
            wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
            sudo apt-get update
            sudo apt-get install -y clang-${{ matrix.version }} lld-${{ matrix.version }} libstdc++-${{ matrix.version }}-dev gcc-8 g++-8 libc++-${{ matrix.version }}-dev libc++abi-${{ matrix.version }}-dev
            echo "::set-env name=CC::clang-${{ matrix.version }}"
            echo "::set-env name=CXX::clang++-${{ matrix.version }}"
          fi

      - name: Install (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install ninja llvm
          sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /
          echo "::set-env name=CC::/usr/local/opt/llvm/bin/clang"
          echo "::set-env name=CXX::/usr/local/opt/llvm/bin/clang++"

      - name: Install (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          iex (new-object net.webclient).downloadstring('https://get.scoop.sh')
          scoop install ninja llvm --global

          if ("${{ matrix.compiler }}" -eq "clang") {
            echo "::set-env name=CC::clang"
            echo "::set-env name=CXX::clang++"
          } else {
            echo "::set-env name=CC::${{ matrix.compiler }}"
            echo "::set-env name=CXX::${{ matrix.compiler }}"
          }

          & .github\workflows\vsenv.bat -arch=x64 -host_arch=x64

      - name: Configure
        env:
          ANTARA_BUILD_TYPE: ${{matrix.cmake_build_type}}
        run: >
          cmake
          -B build
          -S .
          -G Ninja
          -DCMAKE_BUILD_TYPE=${ANTARA_BUILD_TYPE}
          -DANTARA_BUILD_EXAMPLES=ON
          -DUSE_LUA_ANTARA_WRAPPER=ON
          -DANTARA_BUILD_UNIT_TESTS=ON


      - name: TSan (Linux)
        if: matrix.name == 'ubuntu-18-04-clang-8-debug-tsan'
        run: cmake build -DUSE_TSAN=ON

      - name: ASan (Linux)
        if: matrix.name == 'ubuntu-18-04-clang-8-debug-asan'
        run: cmake build -DUSE_ASAN=ON

      - name: UBSan (Linux)
        if: matrix.name == 'ubuntu-18-04-clang-8-debug-ubsan'
        run: cmake build -DUSE_UBSAN=ON -DCMAKE_EXE_LINKER_FLAGS=-fuse-ld=lld-${{ matrix.version }}

      - name: Build
        run: cmake --build build --config ${{matrix.cmake_build_type}}

      - name: Run Tests (Linux and OSX)
        working-directory: build/bin/unit_tests
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: |
          if [[ "${{matrix.name}}" == "ubuntu-18-04-emcc-latest-debug" ]]; then
            for i in *_tests*.js; do node ${i} --reporters=xml --out=${i}-result.xml -s || true; done;
          else
            for i in *_tests; do ./${i} --reporters=xml --out=${i}-result.xml -s || true; done;
          fi

      - name: Run Tests (Windows)
        working-directory: build/bin/unit_tests
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $filePattern = '*_tests.exe'
          foreach ($file in get-ChildItem $filePattern)
          {
            $var = $file.name
            & cmd /c "$var --reporters=xml --out=$var-result.xml -s 2>&1"
          }

      - name: Upload Test (Unix)
        env: # Or as an environment variable
          REPORT_CI_TOKEN: ${{ secrets.REPORT_CI_TOKEN }}
        working-directory: build/bin/unit_tests
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: curl https://report.ci/upload.py --output upload.py && python upload.py --sha $GITHUB_SHA -n "[Doctest ${{ matrix.name }}]" --include='*.xml' --merge ".*"

      - name: Upload Test (Windows)
        env: # Or as an environment variable
          REPORT_CI_TOKEN: ${{ secrets.REPORT_CI_TOKEN }}
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Invoke-WebRequest -Uri https://report.ci/upload.py -OutFile upload.py
          python upload.py --sha $env:GITHUB_SHA -n "Doctest [appveyor ${{ matrix.name }}]" --include='*.xml' --framework=doctest --merge .*